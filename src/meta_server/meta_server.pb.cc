// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta_server.proto

#include "meta_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_meta_5fserver_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_meta_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PartitionLocationRequest_Range;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_meta_5fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PartitionLocationResponse_ReplicaLocation;
}  // namespace protobuf_meta_5fserver_2eproto
namespace meta_server {
class PartionkeyNameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartionkeyNameRequest>
      _instance;
} _PartionkeyNameRequest_default_instance_;
class PartionkeyNameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartionkeyNameResponse>
      _instance;
} _PartionkeyNameResponse_default_instance_;
class PartitionLocationRequest_RangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartitionLocationRequest_Range>
      _instance;
} _PartitionLocationRequest_Range_default_instance_;
class PartitionLocationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartitionLocationRequest>
      _instance;
  const ::meta_server::PartitionLocationRequest_Range* partition_range_;
  ::google::protobuf::int64 hash_val_;
} _PartitionLocationRequest_default_instance_;
class PartitionLocationResponse_ReplicaLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartitionLocationResponse_ReplicaLocation>
      _instance;
} _PartitionLocationResponse_ReplicaLocation_default_instance_;
class PartitionLocationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartitionLocationResponse>
      _instance;
} _PartitionLocationResponse_default_instance_;
}  // namespace meta_server
namespace protobuf_meta_5fserver_2eproto {
static void InitDefaultsPartionkeyNameRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::meta_server::_PartionkeyNameRequest_default_instance_;
    new (ptr) ::meta_server::PartionkeyNameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::meta_server::PartionkeyNameRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PartionkeyNameRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartionkeyNameRequest}, {}};

static void InitDefaultsPartionkeyNameResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::meta_server::_PartionkeyNameResponse_default_instance_;
    new (ptr) ::meta_server::PartionkeyNameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::meta_server::PartionkeyNameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PartionkeyNameResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartionkeyNameResponse}, {}};

static void InitDefaultsPartitionLocationRequest_Range() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::meta_server::_PartitionLocationRequest_Range_default_instance_;
    new (ptr) ::meta_server::PartitionLocationRequest_Range();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::meta_server::PartitionLocationRequest_Range::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PartitionLocationRequest_Range =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartitionLocationRequest_Range}, {}};

static void InitDefaultsPartitionLocationRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::meta_server::_PartitionLocationRequest_default_instance_;
    new (ptr) ::meta_server::PartitionLocationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::meta_server::PartitionLocationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PartitionLocationRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPartitionLocationRequest}, {
      &protobuf_meta_5fserver_2eproto::scc_info_PartitionLocationRequest_Range.base,}};

static void InitDefaultsPartitionLocationResponse_ReplicaLocation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::meta_server::_PartitionLocationResponse_ReplicaLocation_default_instance_;
    new (ptr) ::meta_server::PartitionLocationResponse_ReplicaLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::meta_server::PartitionLocationResponse_ReplicaLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PartitionLocationResponse_ReplicaLocation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartitionLocationResponse_ReplicaLocation}, {}};

static void InitDefaultsPartitionLocationResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::meta_server::_PartitionLocationResponse_default_instance_;
    new (ptr) ::meta_server::PartitionLocationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::meta_server::PartitionLocationResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PartitionLocationResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPartitionLocationResponse}, {
      &protobuf_meta_5fserver_2eproto::scc_info_PartitionLocationResponse_ReplicaLocation.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PartionkeyNameRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartionkeyNameResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartitionLocationRequest_Range.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartitionLocationRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartitionLocationResponse_ReplicaLocation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartitionLocationResponse.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartionkeyNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartionkeyNameRequest, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartionkeyNameRequest, tab_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartionkeyNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartionkeyNameResponse, partition_key_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationRequest_Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationRequest_Range, min_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationRequest_Range, max_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationRequest, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationRequest, tab_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationRequest, partition_key_name_),
  offsetof(::meta_server::PartitionLocationRequestDefaultTypeInternal, partition_range_),
  offsetof(::meta_server::PartitionLocationRequestDefaultTypeInternal, hash_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationRequest, partition_val_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationResponse_ReplicaLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationResponse_ReplicaLocation, ip_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationResponse_ReplicaLocation, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationResponse, partition_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationResponse, p_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::meta_server::PartitionLocationResponse, partition_location_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::meta_server::PartionkeyNameRequest)},
  { 7, -1, sizeof(::meta_server::PartionkeyNameResponse)},
  { 13, -1, sizeof(::meta_server::PartitionLocationRequest_Range)},
  { 20, -1, sizeof(::meta_server::PartitionLocationRequest)},
  { 31, -1, sizeof(::meta_server::PartitionLocationResponse_ReplicaLocation)},
  { 38, -1, sizeof(::meta_server::PartitionLocationResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::meta_server::_PartionkeyNameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::meta_server::_PartionkeyNameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::meta_server::_PartitionLocationRequest_Range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::meta_server::_PartitionLocationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::meta_server::_PartitionLocationResponse_ReplicaLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::meta_server::_PartitionLocationResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "meta_server.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021meta_server.proto\022\013meta_server\":\n\025Part"
      "ionkeyNameRequest\022\017\n\007db_name\030\001 \001(\t\022\020\n\010ta"
      "b_name\030\002 \001(\t\"4\n\026PartionkeyNameResponse\022\032"
      "\n\022partition_key_name\030\001 \001(\t\"\365\001\n\030Partition"
      "LocationRequest\022\017\n\007db_name\030\001 \001(\t\022\020\n\010tab_"
      "name\030\002 \001(\t\022\032\n\022partition_key_name\030\003 \001(\t\022F"
      "\n\017partition_range\030\004 \001(\0132+.meta_server.Pa"
      "rtitionLocationRequest.RangeH\000\022\022\n\010hash_v"
      "al\030\005 \001(\003H\000\032-\n\005Range\022\021\n\tmin_range\030\001 \001(\003\022\021"
      "\n\tmax_range\030\002 \001(\003B\017\n\rpartition_val\"\306\001\n\031P"
      "artitionLocationResponse\022\025\n\rpartition_cn"
      "t\030\001 \001(\021\022\014\n\004p_id\030\002 \003(\021\022R\n\022partition_locat"
      "ion\030\003 \003(\01326.meta_server.PartitionLocatio"
      "nResponse.ReplicaLocation\0320\n\017ReplicaLoca"
      "tion\022\017\n\007ip_addr\030\001 \001(\t\022\014\n\004port\030\002 \001(\0212\320\001\n\013"
      "MetaService\022Z\n\017GetPartitionKey\022\".meta_se"
      "rver.PartionkeyNameRequest\032#.meta_server"
      ".PartionkeyNameResponse\022e\n\024GetPartitionL"
      "ocation\022%.meta_server.PartitionLocationR"
      "equest\032&.meta_server.PartitionLocationRe"
      "sponseB\003\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 819);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "meta_server.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_meta_5fserver_2eproto
namespace meta_server {

// ===================================================================

void PartionkeyNameRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartionkeyNameRequest::kDbNameFieldNumber;
const int PartionkeyNameRequest::kTabNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartionkeyNameRequest::PartionkeyNameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_meta_5fserver_2eproto::scc_info_PartionkeyNameRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:meta_server.PartionkeyNameRequest)
}
PartionkeyNameRequest::PartionkeyNameRequest(const PartionkeyNameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  tab_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab_name().size() > 0) {
    tab_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_name_);
  }
  // @@protoc_insertion_point(copy_constructor:meta_server.PartionkeyNameRequest)
}

void PartionkeyNameRequest::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PartionkeyNameRequest::~PartionkeyNameRequest() {
  // @@protoc_insertion_point(destructor:meta_server.PartionkeyNameRequest)
  SharedDtor();
}

void PartionkeyNameRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartionkeyNameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PartionkeyNameRequest::descriptor() {
  ::protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartionkeyNameRequest& PartionkeyNameRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_meta_5fserver_2eproto::scc_info_PartionkeyNameRequest.base);
  return *internal_default_instance();
}


void PartionkeyNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:meta_server.PartionkeyNameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PartionkeyNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:meta_server.PartionkeyNameRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string db_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "meta_server.PartionkeyNameRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tab_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab_name().data(), static_cast<int>(this->tab_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "meta_server.PartionkeyNameRequest.tab_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:meta_server.PartionkeyNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:meta_server.PartionkeyNameRequest)
  return false;
#undef DO_
}

void PartionkeyNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:meta_server.PartionkeyNameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartionkeyNameRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_name(), output);
  }

  // string tab_name = 2;
  if (this->tab_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab_name().data(), static_cast<int>(this->tab_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartionkeyNameRequest.tab_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tab_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:meta_server.PartionkeyNameRequest)
}

::google::protobuf::uint8* PartionkeyNameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:meta_server.PartionkeyNameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartionkeyNameRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_name(), target);
  }

  // string tab_name = 2;
  if (this->tab_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab_name().data(), static_cast<int>(this->tab_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartionkeyNameRequest.tab_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tab_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meta_server.PartionkeyNameRequest)
  return target;
}

size_t PartionkeyNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:meta_server.PartionkeyNameRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string tab_name = 2;
  if (this->tab_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartionkeyNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:meta_server.PartionkeyNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartionkeyNameRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartionkeyNameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:meta_server.PartionkeyNameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:meta_server.PartionkeyNameRequest)
    MergeFrom(*source);
  }
}

void PartionkeyNameRequest::MergeFrom(const PartionkeyNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:meta_server.PartionkeyNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.tab_name().size() > 0) {

    tab_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_name_);
  }
}

void PartionkeyNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:meta_server.PartionkeyNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartionkeyNameRequest::CopyFrom(const PartionkeyNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meta_server.PartionkeyNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartionkeyNameRequest::IsInitialized() const {
  return true;
}

void PartionkeyNameRequest::Swap(PartionkeyNameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartionkeyNameRequest::InternalSwap(PartionkeyNameRequest* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tab_name_.Swap(&other->tab_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PartionkeyNameRequest::GetMetadata() const {
  protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PartionkeyNameResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartionkeyNameResponse::kPartitionKeyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartionkeyNameResponse::PartionkeyNameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_meta_5fserver_2eproto::scc_info_PartionkeyNameResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:meta_server.PartionkeyNameResponse)
}
PartionkeyNameResponse::PartionkeyNameResponse(const PartionkeyNameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partition_key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partition_key_name().size() > 0) {
    partition_key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partition_key_name_);
  }
  // @@protoc_insertion_point(copy_constructor:meta_server.PartionkeyNameResponse)
}

void PartionkeyNameResponse::SharedCtor() {
  partition_key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PartionkeyNameResponse::~PartionkeyNameResponse() {
  // @@protoc_insertion_point(destructor:meta_server.PartionkeyNameResponse)
  SharedDtor();
}

void PartionkeyNameResponse::SharedDtor() {
  partition_key_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartionkeyNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PartionkeyNameResponse::descriptor() {
  ::protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartionkeyNameResponse& PartionkeyNameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_meta_5fserver_2eproto::scc_info_PartionkeyNameResponse.base);
  return *internal_default_instance();
}


void PartionkeyNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:meta_server.PartionkeyNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PartionkeyNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:meta_server.PartionkeyNameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string partition_key_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_key_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partition_key_name().data(), static_cast<int>(this->partition_key_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "meta_server.PartionkeyNameResponse.partition_key_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:meta_server.PartionkeyNameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:meta_server.PartionkeyNameResponse)
  return false;
#undef DO_
}

void PartionkeyNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:meta_server.PartionkeyNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partition_key_name = 1;
  if (this->partition_key_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partition_key_name().data(), static_cast<int>(this->partition_key_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartionkeyNameResponse.partition_key_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partition_key_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:meta_server.PartionkeyNameResponse)
}

::google::protobuf::uint8* PartionkeyNameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:meta_server.PartionkeyNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string partition_key_name = 1;
  if (this->partition_key_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partition_key_name().data(), static_cast<int>(this->partition_key_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartionkeyNameResponse.partition_key_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->partition_key_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meta_server.PartionkeyNameResponse)
  return target;
}

size_t PartionkeyNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:meta_server.PartionkeyNameResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string partition_key_name = 1;
  if (this->partition_key_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partition_key_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartionkeyNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:meta_server.PartionkeyNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartionkeyNameResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartionkeyNameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:meta_server.PartionkeyNameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:meta_server.PartionkeyNameResponse)
    MergeFrom(*source);
  }
}

void PartionkeyNameResponse::MergeFrom(const PartionkeyNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:meta_server.PartionkeyNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partition_key_name().size() > 0) {

    partition_key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partition_key_name_);
  }
}

void PartionkeyNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:meta_server.PartionkeyNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartionkeyNameResponse::CopyFrom(const PartionkeyNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meta_server.PartionkeyNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartionkeyNameResponse::IsInitialized() const {
  return true;
}

void PartionkeyNameResponse::Swap(PartionkeyNameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartionkeyNameResponse::InternalSwap(PartionkeyNameResponse* other) {
  using std::swap;
  partition_key_name_.Swap(&other->partition_key_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PartionkeyNameResponse::GetMetadata() const {
  protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PartitionLocationRequest_Range::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionLocationRequest_Range::kMinRangeFieldNumber;
const int PartitionLocationRequest_Range::kMaxRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionLocationRequest_Range::PartitionLocationRequest_Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_meta_5fserver_2eproto::scc_info_PartitionLocationRequest_Range.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:meta_server.PartitionLocationRequest.Range)
}
PartitionLocationRequest_Range::PartitionLocationRequest_Range(const PartitionLocationRequest_Range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_range_, &from.min_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_range_) -
    reinterpret_cast<char*>(&min_range_)) + sizeof(max_range_));
  // @@protoc_insertion_point(copy_constructor:meta_server.PartitionLocationRequest.Range)
}

void PartitionLocationRequest_Range::SharedCtor() {
  ::memset(&min_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_range_) -
      reinterpret_cast<char*>(&min_range_)) + sizeof(max_range_));
}

PartitionLocationRequest_Range::~PartitionLocationRequest_Range() {
  // @@protoc_insertion_point(destructor:meta_server.PartitionLocationRequest.Range)
  SharedDtor();
}

void PartitionLocationRequest_Range::SharedDtor() {
}

void PartitionLocationRequest_Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PartitionLocationRequest_Range::descriptor() {
  ::protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartitionLocationRequest_Range& PartitionLocationRequest_Range::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_meta_5fserver_2eproto::scc_info_PartitionLocationRequest_Range.base);
  return *internal_default_instance();
}


void PartitionLocationRequest_Range::Clear() {
// @@protoc_insertion_point(message_clear_start:meta_server.PartitionLocationRequest.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_range_) -
      reinterpret_cast<char*>(&min_range_)) + sizeof(max_range_));
  _internal_metadata_.Clear();
}

bool PartitionLocationRequest_Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:meta_server.PartitionLocationRequest.Range)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 min_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:meta_server.PartitionLocationRequest.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:meta_server.PartitionLocationRequest.Range)
  return false;
#undef DO_
}

void PartitionLocationRequest_Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:meta_server.PartitionLocationRequest.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 min_range = 1;
  if (this->min_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->min_range(), output);
  }

  // int64 max_range = 2;
  if (this->max_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_range(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:meta_server.PartitionLocationRequest.Range)
}

::google::protobuf::uint8* PartitionLocationRequest_Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:meta_server.PartitionLocationRequest.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 min_range = 1;
  if (this->min_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->min_range(), target);
  }

  // int64 max_range = 2;
  if (this->max_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_range(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meta_server.PartitionLocationRequest.Range)
  return target;
}

size_t PartitionLocationRequest_Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:meta_server.PartitionLocationRequest.Range)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 min_range = 1;
  if (this->min_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_range());
  }

  // int64 max_range = 2;
  if (this->max_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_range());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartitionLocationRequest_Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:meta_server.PartitionLocationRequest.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const PartitionLocationRequest_Range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartitionLocationRequest_Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:meta_server.PartitionLocationRequest.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:meta_server.PartitionLocationRequest.Range)
    MergeFrom(*source);
  }
}

void PartitionLocationRequest_Range::MergeFrom(const PartitionLocationRequest_Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:meta_server.PartitionLocationRequest.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_range() != 0) {
    set_min_range(from.min_range());
  }
  if (from.max_range() != 0) {
    set_max_range(from.max_range());
  }
}

void PartitionLocationRequest_Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:meta_server.PartitionLocationRequest.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionLocationRequest_Range::CopyFrom(const PartitionLocationRequest_Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meta_server.PartitionLocationRequest.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionLocationRequest_Range::IsInitialized() const {
  return true;
}

void PartitionLocationRequest_Range::Swap(PartitionLocationRequest_Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionLocationRequest_Range::InternalSwap(PartitionLocationRequest_Range* other) {
  using std::swap;
  swap(min_range_, other->min_range_);
  swap(max_range_, other->max_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PartitionLocationRequest_Range::GetMetadata() const {
  protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PartitionLocationRequest::InitAsDefaultInstance() {
  ::meta_server::_PartitionLocationRequest_default_instance_.partition_range_ = const_cast< ::meta_server::PartitionLocationRequest_Range*>(
      ::meta_server::PartitionLocationRequest_Range::internal_default_instance());
  ::meta_server::_PartitionLocationRequest_default_instance_.hash_val_ = GOOGLE_LONGLONG(0);
}
void PartitionLocationRequest::set_allocated_partition_range(::meta_server::PartitionLocationRequest_Range* partition_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_partition_val();
  if (partition_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      partition_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partition_range, submessage_arena);
    }
    set_has_partition_range();
    partition_val_.partition_range_ = partition_range;
  }
  // @@protoc_insertion_point(field_set_allocated:meta_server.PartitionLocationRequest.partition_range)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionLocationRequest::kDbNameFieldNumber;
const int PartitionLocationRequest::kTabNameFieldNumber;
const int PartitionLocationRequest::kPartitionKeyNameFieldNumber;
const int PartitionLocationRequest::kPartitionRangeFieldNumber;
const int PartitionLocationRequest::kHashValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionLocationRequest::PartitionLocationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_meta_5fserver_2eproto::scc_info_PartitionLocationRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:meta_server.PartitionLocationRequest)
}
PartitionLocationRequest::PartitionLocationRequest(const PartitionLocationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db_name().size() > 0) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  tab_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tab_name().size() > 0) {
    tab_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_name_);
  }
  partition_key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partition_key_name().size() > 0) {
    partition_key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partition_key_name_);
  }
  clear_has_partition_val();
  switch (from.partition_val_case()) {
    case kPartitionRange: {
      mutable_partition_range()->::meta_server::PartitionLocationRequest_Range::MergeFrom(from.partition_range());
      break;
    }
    case kHashVal: {
      set_hash_val(from.hash_val());
      break;
    }
    case PARTITION_VAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:meta_server.PartitionLocationRequest)
}

void PartitionLocationRequest::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partition_val();
}

PartitionLocationRequest::~PartitionLocationRequest() {
  // @@protoc_insertion_point(destructor:meta_server.PartitionLocationRequest)
  SharedDtor();
}

void PartitionLocationRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_key_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_partition_val()) {
    clear_partition_val();
  }
}

void PartitionLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PartitionLocationRequest::descriptor() {
  ::protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartitionLocationRequest& PartitionLocationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_meta_5fserver_2eproto::scc_info_PartitionLocationRequest.base);
  return *internal_default_instance();
}


void PartitionLocationRequest::clear_partition_val() {
// @@protoc_insertion_point(one_of_clear_start:meta_server.PartitionLocationRequest)
  switch (partition_val_case()) {
    case kPartitionRange: {
      delete partition_val_.partition_range_;
      break;
    }
    case kHashVal: {
      // No need to clear
      break;
    }
    case PARTITION_VAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARTITION_VAL_NOT_SET;
}


void PartitionLocationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:meta_server.PartitionLocationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_partition_val();
  _internal_metadata_.Clear();
}

bool PartitionLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:meta_server.PartitionLocationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string db_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "meta_server.PartitionLocationRequest.db_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tab_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tab_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tab_name().data(), static_cast<int>(this->tab_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "meta_server.PartitionLocationRequest.tab_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partition_key_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_key_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partition_key_name().data(), static_cast<int>(this->partition_key_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "meta_server.PartitionLocationRequest.partition_key_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .meta_server.PartitionLocationRequest.Range partition_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_partition_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 hash_val = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          clear_partition_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partition_val_.hash_val_)));
          set_has_hash_val();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:meta_server.PartitionLocationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:meta_server.PartitionLocationRequest)
  return false;
#undef DO_
}

void PartitionLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:meta_server.PartitionLocationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartitionLocationRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_name(), output);
  }

  // string tab_name = 2;
  if (this->tab_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab_name().data(), static_cast<int>(this->tab_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartitionLocationRequest.tab_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tab_name(), output);
  }

  // string partition_key_name = 3;
  if (this->partition_key_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partition_key_name().data(), static_cast<int>(this->partition_key_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartitionLocationRequest.partition_key_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->partition_key_name(), output);
  }

  // .meta_server.PartitionLocationRequest.Range partition_range = 4;
  if (has_partition_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_partition_range(), output);
  }

  // int64 hash_val = 5;
  if (has_hash_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->hash_val(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:meta_server.PartitionLocationRequest)
}

::google::protobuf::uint8* PartitionLocationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:meta_server.PartitionLocationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_name = 1;
  if (this->db_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartitionLocationRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_name(), target);
  }

  // string tab_name = 2;
  if (this->tab_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tab_name().data(), static_cast<int>(this->tab_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartitionLocationRequest.tab_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tab_name(), target);
  }

  // string partition_key_name = 3;
  if (this->partition_key_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partition_key_name().data(), static_cast<int>(this->partition_key_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartitionLocationRequest.partition_key_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->partition_key_name(), target);
  }

  // .meta_server.PartitionLocationRequest.Range partition_range = 4;
  if (has_partition_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_partition_range(), deterministic, target);
  }

  // int64 hash_val = 5;
  if (has_hash_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->hash_val(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meta_server.PartitionLocationRequest)
  return target;
}

size_t PartitionLocationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:meta_server.PartitionLocationRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string db_name = 1;
  if (this->db_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  // string tab_name = 2;
  if (this->tab_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tab_name());
  }

  // string partition_key_name = 3;
  if (this->partition_key_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partition_key_name());
  }

  switch (partition_val_case()) {
    // .meta_server.PartitionLocationRequest.Range partition_range = 4;
    case kPartitionRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *partition_val_.partition_range_);
      break;
    }
    // int64 hash_val = 5;
    case kHashVal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hash_val());
      break;
    }
    case PARTITION_VAL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartitionLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:meta_server.PartitionLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PartitionLocationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartitionLocationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:meta_server.PartitionLocationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:meta_server.PartitionLocationRequest)
    MergeFrom(*source);
  }
}

void PartitionLocationRequest::MergeFrom(const PartitionLocationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:meta_server.PartitionLocationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.db_name().size() > 0) {

    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.tab_name().size() > 0) {

    tab_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tab_name_);
  }
  if (from.partition_key_name().size() > 0) {

    partition_key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partition_key_name_);
  }
  switch (from.partition_val_case()) {
    case kPartitionRange: {
      mutable_partition_range()->::meta_server::PartitionLocationRequest_Range::MergeFrom(from.partition_range());
      break;
    }
    case kHashVal: {
      set_hash_val(from.hash_val());
      break;
    }
    case PARTITION_VAL_NOT_SET: {
      break;
    }
  }
}

void PartitionLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:meta_server.PartitionLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionLocationRequest::CopyFrom(const PartitionLocationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meta_server.PartitionLocationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionLocationRequest::IsInitialized() const {
  return true;
}

void PartitionLocationRequest::Swap(PartitionLocationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionLocationRequest::InternalSwap(PartitionLocationRequest* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tab_name_.Swap(&other->tab_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  partition_key_name_.Swap(&other->partition_key_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(partition_val_, other->partition_val_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PartitionLocationRequest::GetMetadata() const {
  protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PartitionLocationResponse_ReplicaLocation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionLocationResponse_ReplicaLocation::kIpAddrFieldNumber;
const int PartitionLocationResponse_ReplicaLocation::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionLocationResponse_ReplicaLocation::PartitionLocationResponse_ReplicaLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_meta_5fserver_2eproto::scc_info_PartitionLocationResponse_ReplicaLocation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:meta_server.PartitionLocationResponse.ReplicaLocation)
}
PartitionLocationResponse_ReplicaLocation::PartitionLocationResponse_ReplicaLocation(const PartitionLocationResponse_ReplicaLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_addr().size() > 0) {
    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:meta_server.PartitionLocationResponse.ReplicaLocation)
}

void PartitionLocationResponse_ReplicaLocation::SharedCtor() {
  ip_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

PartitionLocationResponse_ReplicaLocation::~PartitionLocationResponse_ReplicaLocation() {
  // @@protoc_insertion_point(destructor:meta_server.PartitionLocationResponse.ReplicaLocation)
  SharedDtor();
}

void PartitionLocationResponse_ReplicaLocation::SharedDtor() {
  ip_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartitionLocationResponse_ReplicaLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PartitionLocationResponse_ReplicaLocation::descriptor() {
  ::protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartitionLocationResponse_ReplicaLocation& PartitionLocationResponse_ReplicaLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_meta_5fserver_2eproto::scc_info_PartitionLocationResponse_ReplicaLocation.base);
  return *internal_default_instance();
}


void PartitionLocationResponse_ReplicaLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:meta_server.PartitionLocationResponse.ReplicaLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

bool PartitionLocationResponse_ReplicaLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:meta_server.PartitionLocationResponse.ReplicaLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip_addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "meta_server.PartitionLocationResponse.ReplicaLocation.ip_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:meta_server.PartitionLocationResponse.ReplicaLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:meta_server.PartitionLocationResponse.ReplicaLocation)
  return false;
#undef DO_
}

void PartitionLocationResponse_ReplicaLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:meta_server.PartitionLocationResponse.ReplicaLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartitionLocationResponse.ReplicaLocation.ip_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_addr(), output);
  }

  // sint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:meta_server.PartitionLocationResponse.ReplicaLocation)
}

::google::protobuf::uint8* PartitionLocationResponse_ReplicaLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:meta_server.PartitionLocationResponse.ReplicaLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_addr().data(), static_cast<int>(this->ip_addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "meta_server.PartitionLocationResponse.ReplicaLocation.ip_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_addr(), target);
  }

  // sint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meta_server.PartitionLocationResponse.ReplicaLocation)
  return target;
}

size_t PartitionLocationResponse_ReplicaLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:meta_server.PartitionLocationResponse.ReplicaLocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip_addr = 1;
  if (this->ip_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_addr());
  }

  // sint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartitionLocationResponse_ReplicaLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:meta_server.PartitionLocationResponse.ReplicaLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const PartitionLocationResponse_ReplicaLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartitionLocationResponse_ReplicaLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:meta_server.PartitionLocationResponse.ReplicaLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:meta_server.PartitionLocationResponse.ReplicaLocation)
    MergeFrom(*source);
  }
}

void PartitionLocationResponse_ReplicaLocation::MergeFrom(const PartitionLocationResponse_ReplicaLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:meta_server.PartitionLocationResponse.ReplicaLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip_addr().size() > 0) {

    ip_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_addr_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void PartitionLocationResponse_ReplicaLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:meta_server.PartitionLocationResponse.ReplicaLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionLocationResponse_ReplicaLocation::CopyFrom(const PartitionLocationResponse_ReplicaLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meta_server.PartitionLocationResponse.ReplicaLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionLocationResponse_ReplicaLocation::IsInitialized() const {
  return true;
}

void PartitionLocationResponse_ReplicaLocation::Swap(PartitionLocationResponse_ReplicaLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionLocationResponse_ReplicaLocation::InternalSwap(PartitionLocationResponse_ReplicaLocation* other) {
  using std::swap;
  ip_addr_.Swap(&other->ip_addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PartitionLocationResponse_ReplicaLocation::GetMetadata() const {
  protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PartitionLocationResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionLocationResponse::kPartitionCntFieldNumber;
const int PartitionLocationResponse::kPIdFieldNumber;
const int PartitionLocationResponse::kPartitionLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionLocationResponse::PartitionLocationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_meta_5fserver_2eproto::scc_info_PartitionLocationResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:meta_server.PartitionLocationResponse)
}
PartitionLocationResponse::PartitionLocationResponse(const PartitionLocationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      p_id_(from.p_id_),
      partition_location_(from.partition_location_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partition_cnt_ = from.partition_cnt_;
  // @@protoc_insertion_point(copy_constructor:meta_server.PartitionLocationResponse)
}

void PartitionLocationResponse::SharedCtor() {
  partition_cnt_ = 0;
}

PartitionLocationResponse::~PartitionLocationResponse() {
  // @@protoc_insertion_point(destructor:meta_server.PartitionLocationResponse)
  SharedDtor();
}

void PartitionLocationResponse::SharedDtor() {
}

void PartitionLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PartitionLocationResponse::descriptor() {
  ::protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartitionLocationResponse& PartitionLocationResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_meta_5fserver_2eproto::scc_info_PartitionLocationResponse.base);
  return *internal_default_instance();
}


void PartitionLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:meta_server.PartitionLocationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  p_id_.Clear();
  partition_location_.Clear();
  partition_cnt_ = 0;
  _internal_metadata_.Clear();
}

bool PartitionLocationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:meta_server.PartitionLocationResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sint32 partition_cnt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &partition_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 p_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_p_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 18u, input, this->mutable_p_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .meta_server.PartitionLocationResponse.ReplicaLocation partition_location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_partition_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:meta_server.PartitionLocationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:meta_server.PartitionLocationResponse)
  return false;
#undef DO_
}

void PartitionLocationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:meta_server.PartitionLocationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 partition_cnt = 1;
  if (this->partition_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->partition_cnt(), output);
  }

  // repeated sint32 p_id = 2;
  if (this->p_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _p_id_cached_byte_size_));
  }
  for (int i = 0, n = this->p_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->p_id(i), output);
  }

  // repeated .meta_server.PartitionLocationResponse.ReplicaLocation partition_location = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partition_location_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->partition_location(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:meta_server.PartitionLocationResponse)
}

::google::protobuf::uint8* PartitionLocationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:meta_server.PartitionLocationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 partition_cnt = 1;
  if (this->partition_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->partition_cnt(), target);
  }

  // repeated sint32 p_id = 2;
  if (this->p_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _p_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->p_id_, target);
  }

  // repeated .meta_server.PartitionLocationResponse.ReplicaLocation partition_location = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partition_location_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->partition_location(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meta_server.PartitionLocationResponse)
  return target;
}

size_t PartitionLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:meta_server.PartitionLocationResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated sint32 p_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->p_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _p_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .meta_server.PartitionLocationResponse.ReplicaLocation partition_location = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->partition_location_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->partition_location(static_cast<int>(i)));
    }
  }

  // sint32 partition_cnt = 1;
  if (this->partition_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->partition_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartitionLocationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:meta_server.PartitionLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PartitionLocationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartitionLocationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:meta_server.PartitionLocationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:meta_server.PartitionLocationResponse)
    MergeFrom(*source);
  }
}

void PartitionLocationResponse::MergeFrom(const PartitionLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:meta_server.PartitionLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  p_id_.MergeFrom(from.p_id_);
  partition_location_.MergeFrom(from.partition_location_);
  if (from.partition_cnt() != 0) {
    set_partition_cnt(from.partition_cnt());
  }
}

void PartitionLocationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:meta_server.PartitionLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionLocationResponse::CopyFrom(const PartitionLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meta_server.PartitionLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionLocationResponse::IsInitialized() const {
  return true;
}

void PartitionLocationResponse::Swap(PartitionLocationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionLocationResponse::InternalSwap(PartitionLocationResponse* other) {
  using std::swap;
  p_id_.InternalSwap(&other->p_id_);
  CastToBase(&partition_location_)->InternalSwap(CastToBase(&other->partition_location_));
  swap(partition_cnt_, other->partition_cnt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PartitionLocationResponse::GetMetadata() const {
  protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_meta_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

MetaService::~MetaService() {}

const ::google::protobuf::ServiceDescriptor* MetaService::descriptor() {
  protobuf_meta_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_meta_5fserver_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* MetaService::GetDescriptor() {
  return descriptor();
}

void MetaService::GetPartitionKey(::google::protobuf::RpcController* controller,
                         const ::meta_server::PartionkeyNameRequest*,
                         ::meta_server::PartionkeyNameResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPartitionKey() not implemented.");
  done->Run();
}

void MetaService::GetPartitionLocation(::google::protobuf::RpcController* controller,
                         const ::meta_server::PartitionLocationRequest*,
                         ::meta_server::PartitionLocationResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPartitionLocation() not implemented.");
  done->Run();
}

void MetaService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_meta_5fserver_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetPartitionKey(controller,
             ::google::protobuf::down_cast<const ::meta_server::PartionkeyNameRequest*>(request),
             ::google::protobuf::down_cast< ::meta_server::PartionkeyNameResponse*>(response),
             done);
      break;
    case 1:
      GetPartitionLocation(controller,
             ::google::protobuf::down_cast<const ::meta_server::PartitionLocationRequest*>(request),
             ::google::protobuf::down_cast< ::meta_server::PartitionLocationResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MetaService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::meta_server::PartionkeyNameRequest::default_instance();
    case 1:
      return ::meta_server::PartitionLocationRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& MetaService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::meta_server::PartionkeyNameResponse::default_instance();
    case 1:
      return ::meta_server::PartitionLocationResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MetaService_Stub::MetaService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MetaService_Stub::MetaService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MetaService_Stub::~MetaService_Stub() {
  if (owns_channel_) delete channel_;
}

void MetaService_Stub::GetPartitionKey(::google::protobuf::RpcController* controller,
                              const ::meta_server::PartionkeyNameRequest* request,
                              ::meta_server::PartionkeyNameResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MetaService_Stub::GetPartitionLocation(::google::protobuf::RpcController* controller,
                              const ::meta_server::PartitionLocationRequest* request,
                              ::meta_server::PartitionLocationResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace meta_server
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::meta_server::PartionkeyNameRequest* Arena::CreateMaybeMessage< ::meta_server::PartionkeyNameRequest >(Arena* arena) {
  return Arena::CreateInternal< ::meta_server::PartionkeyNameRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::meta_server::PartionkeyNameResponse* Arena::CreateMaybeMessage< ::meta_server::PartionkeyNameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::meta_server::PartionkeyNameResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::meta_server::PartitionLocationRequest_Range* Arena::CreateMaybeMessage< ::meta_server::PartitionLocationRequest_Range >(Arena* arena) {
  return Arena::CreateInternal< ::meta_server::PartitionLocationRequest_Range >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::meta_server::PartitionLocationRequest* Arena::CreateMaybeMessage< ::meta_server::PartitionLocationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::meta_server::PartitionLocationRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::meta_server::PartitionLocationResponse_ReplicaLocation* Arena::CreateMaybeMessage< ::meta_server::PartitionLocationResponse_ReplicaLocation >(Arena* arena) {
  return Arena::CreateInternal< ::meta_server::PartitionLocationResponse_ReplicaLocation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::meta_server::PartitionLocationResponse* Arena::CreateMaybeMessage< ::meta_server::PartitionLocationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::meta_server::PartitionLocationResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
